{"version":3,"sources":["components/Header.js","components/Contents.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Contnets","useState","confirmData","setConfirmData","quarantinedData","setQuarantinedData","compareData","setCompareData","useEffect","fetchEvents","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentData","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","death","Death","recovered","Recovered","findItem","find","push","labels","map","datasets","label","backgroundColor","fill","borderColor","last","length","console","log","options","plugins","title","display","text","font","size","legend","position","App","Contents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a334b6dd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>COVID-19</h1>\r\n      <select>\r\n        <option>국내</option>\r\n        <option>세계</option>\r\n      </select>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Bar, Line, Doughnut } from \"react-chartjs-2\";\r\n\r\nconst Contnets = () => {\r\n  const [confirmData, setConfirmData] = useState({});\r\n  const [quarantinedData, setQuarantinedData] = useState({});\r\n  const [compareData, setCompareData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchEvents = async () => {\r\n      const res = await axios.get(\r\n        \"https://api.covid19api.com/total/dayone/country/kr\"\r\n      );\r\n      makeData(res.data);\r\n    };\r\n\r\n    const makeData = (items) => {\r\n      const arr = items.reduce((acc, cur) => {\r\n        const currentData = new Date(cur.Date);\r\n        const year = currentData.getFullYear();\r\n        const month = currentData.getMonth();\r\n        const date = currentData.getDate();\r\n        const confirmed = cur.Confirmed;\r\n        const active = cur.Confirmed;\r\n        const death = cur.Death;\r\n        const recovered = cur.Recovered;\r\n\r\n        const findItem = acc.find((a) => a.year === year && a.month === month);\r\n\r\n        if (!findItem) {\r\n          acc.push({ year, month, date, confirmed, active, death, recovered });\r\n        }\r\n        if (findItem && findItem.date < date) {\r\n          findItem.active = active;\r\n          findItem.death = death;\r\n          findItem.date = date;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.recovered = recovered;\r\n          findItem.confirmed = confirmed;\r\n        }\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n      const labels = arr.map((a) => `${a.month + 1}`);\r\n\r\n      setConfirmData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"국내 누적 확진자\",\r\n            backgroundColor: \" salmon\",\r\n            fill: true,\r\n            data: arr.map((a) => a.confirmed),\r\n          },\r\n        ],\r\n      });\r\n\r\n      setQuarantinedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"월별 격리자 현황\",\r\n            borderColor: \" salmon\",\r\n            fill: false,\r\n            data: arr.map((a) => a.active),\r\n          },\r\n        ],\r\n      });\r\n\r\n      const last = arr[arr.length - 1];\r\n      console.log(last);\r\n      setCompareData({\r\n        labels: [\"확진자\", \"격리해제\", \"사망\"],\r\n        datasets: [\r\n          {\r\n            label: \"누적 확진, 해제, 사망 비율\",\r\n            backgroundColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n            borderColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n            fill: false,\r\n            data: [last.confirmed, last.recovered, last.death],\r\n          },\r\n        ],\r\n      });\r\n    };\r\n\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      <h2>국내 코로나 현황</h2>\r\n      <div className=\"contents\">\r\n        <div>\r\n          <Bar\r\n            data={confirmData}\r\n            options={{\r\n              plugins: {\r\n                title: {\r\n                  display: true,\r\n                  text: \"누적 확진자 동향\",\r\n                  font: { size: 16 },\r\n                },\r\n                legend: { position: \"bottom\" },\r\n              },\r\n            }}\r\n          />\r\n          <Line\r\n            data={quarantinedData}\r\n            options={{\r\n              plugins: {\r\n                title: {\r\n                  display: true,\r\n                  text: \"월별 격리자 추이\",\r\n                  font: { size: 16 },\r\n                },\r\n                legend: { position: \"bottom\" },\r\n              },\r\n            }}\r\n          />\r\n          <Doughnut\r\n            data={compareData}\r\n            options={{\r\n              plugins: {\r\n                title: {\r\n                  display: true,\r\n                  text: `누적 확진, 해제, 사망 (${new Date().getMonth()}월 현재)`,\r\n                  font: { size: 16 },\r\n                },\r\n                legend: { position: \"bottom\" },\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Contnets;\r\n","import \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Contents from \"./components/Contents\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Contents />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}